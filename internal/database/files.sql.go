// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: files.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
insert into files (id, file_name, path, format, user_id, size, created_at,  updated_at)
values (gen_random_uuid(), $1, $2, $3, $4, $5, now(), now())
returning id, file_name, path, format, user_id
`

type CreateFileParams struct {
	FileName string
	Path     string
	Format   Formats
	UserID   uuid.NullUUID
	Size     int64
}

type CreateFileRow struct {
	ID       uuid.UUID
	FileName string
	Path     string
	Format   Formats
	UserID   uuid.NullUUID
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (CreateFileRow, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.FileName,
		arg.Path,
		arg.Format,
		arg.UserID,
		arg.Size,
	)
	var i CreateFileRow
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.Path,
		&i.Format,
		&i.UserID,
	)
	return i, err
}

const deleteFileById = `-- name: DeleteFileById :exec
delete from files where id = $1
`

func (q *Queries) DeleteFileById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFileById, id)
	return err
}

const findFileByFileName = `-- name: FindFileByFileName :one
select id, file_name, path, format, user_id, size from files where file_name = $1
`

type FindFileByFileNameRow struct {
	ID       uuid.UUID
	FileName string
	Path     string
	Format   Formats
	UserID   uuid.NullUUID
	Size     int64
}

func (q *Queries) FindFileByFileName(ctx context.Context, fileName string) (FindFileByFileNameRow, error) {
	row := q.db.QueryRowContext(ctx, findFileByFileName, fileName)
	var i FindFileByFileNameRow
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.Path,
		&i.Format,
		&i.UserID,
		&i.Size,
	)
	return i, err
}

const findFileById = `-- name: FindFileById :one
select id, file_name, path, format, user_id, size from files where id = $1
`

type FindFileByIdRow struct {
	ID       uuid.UUID
	FileName string
	Path     string
	Format   Formats
	UserID   uuid.NullUUID
	Size     int64
}

func (q *Queries) FindFileById(ctx context.Context, id uuid.UUID) (FindFileByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findFileById, id)
	var i FindFileByIdRow
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.Path,
		&i.Format,
		&i.UserID,
		&i.Size,
	)
	return i, err
}

const findFiles = `-- name: FindFiles :many
select id, file_name, path, format, user_id, size from files
`

type FindFilesRow struct {
	ID       uuid.UUID
	FileName string
	Path     string
	Format   Formats
	UserID   uuid.NullUUID
	Size     int64
}

func (q *Queries) FindFiles(ctx context.Context) ([]FindFilesRow, error) {
	rows, err := q.db.QueryContext(ctx, findFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindFilesRow
	for rows.Next() {
		var i FindFilesRow
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.Path,
			&i.Format,
			&i.UserID,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFileById = `-- name: UpdateFileById :one
update files set file_name = $2, path = $3, format = $4, updated_at = now() where id = $1
returning id, file_name, path, format, user_id, size
`

type UpdateFileByIdParams struct {
	ID       uuid.UUID
	FileName string
	Path     string
	Format   Formats
}

type UpdateFileByIdRow struct {
	ID       uuid.UUID
	FileName string
	Path     string
	Format   Formats
	UserID   uuid.NullUUID
	Size     int64
}

func (q *Queries) UpdateFileById(ctx context.Context, arg UpdateFileByIdParams) (UpdateFileByIdRow, error) {
	row := q.db.QueryRowContext(ctx, updateFileById,
		arg.ID,
		arg.FileName,
		arg.Path,
		arg.Format,
	)
	var i UpdateFileByIdRow
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.Path,
		&i.Format,
		&i.UserID,
		&i.Size,
	)
	return i, err
}
